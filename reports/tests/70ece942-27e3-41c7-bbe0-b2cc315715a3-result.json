{"name": "test_cr_add_transcript[Danielle Theresa Kennedy : testatt@inboxbear.com;916-345-8432;Daniel Vlad Tabakh;attorney0@yahoo.com;510-288-8737-Test_deposition2022-10-09-39 : deponent;256698;256697]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeMedium css-yjke33\" tabindex=\"0\" type=\"button\" name=\"closeBtnModal\">...</button> is not clickable at point (1168, 90). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 1; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\">...</div>\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00327413+2389011]\n\tOrdinal0 [0x002B9F61+1941345]\n\tOrdinal0 [0x001AC658+837208]\n\tOrdinal0 [0x001DF8AF+1046703]\n\tOrdinal0 [0x001DD8D6+1038550]\n\tOrdinal0 [0x001DB5EB+1029611]\n\tOrdinal0 [0x001DA359+1024857]\n\tOrdinal0 [0x001CFF93+982931]\n\tOrdinal0 [0x001F414C+1130828]\n\tOrdinal0 [0x001CF974+981364]\n\tOrdinal0 [0x001F4364+1131364]\n\tOrdinal0 [0x00204302+1196802]\n\tOrdinal0 [0x001F3F66+1130342]\n\tOrdinal0 [0x001CE546+976198]\n\tOrdinal0 [0x001CF456+980054]\n\tGetHandleVerifier [0x004D9632+1727522]\n\tGetHandleVerifier [0x0058BA4D+2457661]\n\tGetHandleVerifier [0x003BEB81+569713]\n\tGetHandleVerifier [0x003BDD76+566118]\n\tOrdinal0 [0x002C0B2B+1968939]\n\tOrdinal0 [0x002C5988+1989000]\n\tOrdinal0 [0x002C5A75+1989237]\n\tOrdinal0 [0x002CECB1+2026673]\n\tBaseThreadInitThunk [0x761A62C4+36]\n\tRtlSubscribeWnfStateChangeNotification [0x77270F79+1081]\n\tRtlSubscribeWnfStateChangeNotification [0x77270F44+1028]\n\t(No symbol) [0x00000000]", "trace": "app = <pages.application.Application object at 0x000002778AE6C220>\natt = Danielle Theresa Kennedy : testatt@inboxbear.com;916-345-8432;Daniel Vlad Tabakh;attorney0@yahoo.com;510-288-8737\ndeposition = Test_deposition2022-10-09-39 : deponent;256698;256697\n\n    @allure.description(\"Upload transcript, cr\")\n    @pytest.mark.parametrize(\"deposition\", deposition, ids=[repr(x) for x in deposition])\n    @pytest.mark.parametrize(\"att\", attorneys, ids=[repr(x) for x in attorneys])\n    def test_cr_add_transcript(app, att, deposition):\n    \tapp.session.login(login=\"testcr20@getnada.com\", password=\"1234Qwer\")\n>   \tapp.cr_appear.past_deposition()\n\ntests\\test_createdepo_manually.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\cr_appearances.py:92: in past_deposition\n    wd.find_element(By.CSS_SELECTOR, \"button[name='closeBtnModal']\").click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002778AEA5DE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...n [0x77270F79+1081]\\\\n\\\\tRtlSubscribeWnfStateChangeNotification [0x77270F44+1028]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeMedium css-yjke33\" tabindex=\"0\" type=\"button\" name=\"closeBtnModal\">...</button> is not clickable at point (1168, 90). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 1; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\">...</div>\nE         (Session info: chrome=100.0.4896.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00327413+2389011]\nE       \tOrdinal0 [0x002B9F61+1941345]\nE       \tOrdinal0 [0x001AC658+837208]\nE       \tOrdinal0 [0x001DF8AF+1046703]\nE       \tOrdinal0 [0x001DD8D6+1038550]\nE       \tOrdinal0 [0x001DB5EB+1029611]\nE       \tOrdinal0 [0x001DA359+1024857]\nE       \tOrdinal0 [0x001CFF93+982931]\nE       \tOrdinal0 [0x001F414C+1130828]\nE       \tOrdinal0 [0x001CF974+981364]\nE       \tOrdinal0 [0x001F4364+1131364]\nE       \tOrdinal0 [0x00204302+1196802]\nE       \tOrdinal0 [0x001F3F66+1130342]\nE       \tOrdinal0 [0x001CE546+976198]\nE       \tOrdinal0 [0x001CF456+980054]\nE       \tGetHandleVerifier [0x004D9632+1727522]\nE       \tGetHandleVerifier [0x0058BA4D+2457661]\nE       \tGetHandleVerifier [0x003BEB81+569713]\nE       \tGetHandleVerifier [0x003BDD76+566118]\nE       \tOrdinal0 [0x002C0B2B+1968939]\nE       \tOrdinal0 [0x002C5988+1989000]\nE       \tOrdinal0 [0x002C5A75+1989237]\nE       \tOrdinal0 [0x002CECB1+2026673]\nE       \tBaseThreadInitThunk [0x761A62C4+36]\nE       \tRtlSubscribeWnfStateChangeNotification [0x77270F79+1081]\nE       \tRtlSubscribeWnfStateChangeNotification [0x77270F44+1028]\nE       \t(No symbol) [0x00000000]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "Upload transcript, cr", "attachments": [{"name": "log", "source": "2cb47feb-84b9-4465-ab05-bbfb674ccc7d-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "5c5ffad4-6d85-42a0-a296-812764b66d2d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "att", "value": "Danielle Theresa Kennedy : testatt@inboxbear.com;916-345-8432;Daniel Vlad Tabakh;attorney0@yahoo.com;510-288-8737"}, {"name": "deposition", "value": "Test_deposition2022-10-09-39 : deponent;256698;256697"}], "start": 1650957347735, "stop": 1650957367929, "uuid": "31e19745-eb47-4768-b20a-ea640bbfc10e", "historyId": "e7451a5bae84ebd863fb61adb0303019", "testCaseId": "703c61f02ca449369d1feeaf325ec67f", "fullName": "tests.test_createdepo_manually#test_cr_add_transcript", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_createdepo_manually"}, {"name": "host", "value": "EvgenPS"}, {"name": "thread", "value": "3580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_createdepo_manually"}]}